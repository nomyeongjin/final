<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.project.foodpin.myPage.model.mapper.StoreMyPageMapper">

	<!-- 리뷰 조회 resultMap -->
	<resultMap type="Review" id="review_rm">

	
		<id property="reviewNo" column="REVIEW_NO"/>
		
		<collection 
			property="uploadList"
			select = "uploadImageList"
			column = "REVIEW_NO"
			javaType = "java.util.ArrayList"
			ofType = "UploadImage"
		/>
		
		<collection 
			property="hashList"
			select = "selectHashList"
			column = "REVIEW_NO"
			javaType = "java.util.ArrayList"
			ofType = "ReviewHash"
		/>
		
		<collection 
			property="replyList"
			select = "selectReplyList"
			column = "REVIEW_NO"
			javaType = "java.util.ArrayList"
			ofType = "ReviewReply"
		/>
		
	</resultMap>



	<!-- *** 가게 정보 *** -->
	
	<!-- 가게 정보 수정 화면 이동 -->
	<select id="selectstoreInfo">
		SELECT STORE_NO, STORE_IMG, STORE_NAME, STORE_TEL, STORE_LOCATION, OPEN_HOUR, CLOSE_HOUR, 
			BREAKTIME_START, BREAKTIME_END, STORE_STATUS, STORE_MAX_NUMBER, STORE_MAX_TABLE, STORE_INFO
			
		FROM "STORE"
		WHERE STORE_NO = (
			SELECT STORE_NO
			FROM "STORE"
			JOIN MEMBER USING(MEMBER_NO)
			WHERE MEMBER_NO = #{memberNo}
		)
	</select>
	
	<!-- 가게 정보 조회 -->
	<select id="selectstoreInfoJs">
		SELECT STORE_NO, STORE_IMG, STORE_NAME, STORE_TEL, STORE_LOCATION, OPEN_HOUR, CLOSE_HOUR, 
			BREAKTIME_START, BREAKTIME_END, STORE_STATUS, STORE_MAX_NUMBER, STORE_MAX_TABLE, STORE_INFO
		FROM "STORE"
		WHERE STORE_NO = #{storeNo}
	</select>
	
	<!-- 가게 카테고리 조회 -->
	<select id="selectCategory">
		SELECT STORE_NO, CATEGORY_CODE, CATEGORY_TITLE 
		FROM "STORE_CATEGORY"
		JOIN "CATEGORY" USING (CATEGORY_CODE)
		WHERE STORE_NO = #{storeNo}
		ORDER BY CATEGORY_CODE
	</select>
	
	<!-- 모든 카테고리 조회 -->
	<select id="selectCategoryAll">
		SELECT CATEGORY_CODE, CATEGORY_TITLE FROM "CATEGORY" WHERE CATEGORY_CODE > 1 ORDER BY CATEGORY_CODE
	</select>
	
	<!-- 기존 가게 사진 경로 조회 -->
	<select id="selectStoreImg">
		SELECT STORE_IMG FROM "STORE" WHERE STORE_NO = #{storeNo}
	</select>
	
	<!-- 가게 정보 수정 -->
	<update id="storeInfoUpdate">
		UPDATE "STORE" SET STORE_IMG = #{storeImg}, 
			STORE_MAX_NUMBER = #{storeMaxNumber}, STORE_MAX_TABLE = #{storeMaxTable}, 
			OPEN_HOUR = #{openHour}, CLOSE_HOUR = #{closeHour}, 
			BREAKTIME_START = #{breaktimeStart}, BREAKTIME_END = #{breaktimeEnd}, STORE_INFO = #{storeInfo}
		
		<if test='storeNo == null'>
		WHERE STORE_NO =(
			SELECT STORE_NO FROM "STORE"
			JOIN MEMBER USING(MEMBER_NO)
			WHERE MEMBER_NO = #{memberNo}
		)
		</if>
		
		<if test='storeNo != null'>
		WHERE STORE_NO = #{storeNo} 
		</if>
		
	</update>
	
	<update id="storeStautusUpdate">
		UPDATE "STORE" STORE_STATUS = #{storeStatus} WHERE STORE_NO = #{storeNo}
	</update>
	
	<!-- 카테고리 삭제 -->
	<update id="categoryDelete">
		DELETE FROM "STORE_CATEGORY" WHERE STORE_NO = #{storeNo}
	</update>
	
	<!-- 카테고리 수정 -->
	<insert id="categoryUpdate">
		INSERT INTO "STORE_CATEGORY" VALUES(#{storeNo}, #{categoryCode})
	</insert>
	
	<!-- *** 메뉴 정보 *** -->
	
	<!--  메뉴 조회  -->
	<select id="menuSelect">
	SELECT MENU_NO, MENU_IMG_URL, MENU_TITLE, MENU_AMOUNT, MENU_CONTENT 
	FROM "MENU" WHERE STORE_NO = #{storeNo} AND MENU_FL = 'N'
	</select>
	
	<!-- 메뉴 번호 조회 -->
	<select id="selectMenuNo">
		SELECT MENU_NO 
		FROM "MENU"
		WHERE STORE_NO = #{storeNo} AND MENU_TITLE = #{menuTitle} AND MENU_FL = 'N'
	</select>
	
	<!-- 메뉴 삭제 -->
	<update id="deleteAllMenu">
		UPDATE "MENU" SET MENU_FL = 'Y' WHERE STORE_NO = #{storeNo}
	</update>
	
	<!-- 메뉴 등록 -->
	<insert id="insertMenu">
		INSERT INTO "MENU" VALUES(SEQ_MENU_NO.NEXTVAL, #{menuTitle}, 
		#{menuAmount}, #{menuContent}, #{menuImgUrl}, #{storeNo}, DEFAULT)
	</insert>
	
	<!-- 완전히 동일한 메뉴인지 조회 -->
	<select id="selectSameMenuNo">
		SELECT COUNT(*) FROM "MENU"
		WHERE STORE_NO = #{storeNo} AND MENU_TITLE = #{menuTitle} AND MENU_AMOUNT = #menuAmount}
			AND MENU_CONTENT = #{menuContent} AND MENU_IMG_URL #{menuImgUrl} AND MENU_FL = 'N';
	</select> 
	
	
	<!-- *** 휴무일 정보 *** -->

	<!-- 기존 고정 휴무일 삭제 -->
	<select id="countOffWeek">
		SELECT COUNT(*) FROM "OFF_WEEK" WHERE STORE_NO = #{storeNo}
	</select>
	
	<!-- 기존 고정 휴무일 삭제 -->
	<delete id="deleteOffWeek">
		DELETE FROM "OFF_WEEK" WHERE STORE_NO = #{storeNo}
	</delete>
	
	<!-- 해당하는 결과가 없을 경우 등록 -->
	<insert id="insertOffWeek">
		INSERT INTO "OFF_WEEK" VALUES(SEQ_WEEK_OFF_NO.NEXTVAL, #{storeNo}, #{offWeek})
	</insert>
	
	<!-- 고정 휴무일 조회 -->
	<select id="selectWeekOff">
		SELECT OFF_WEEK FROM "OFF_WEEK" WHERE STORE_NO = #{storeNo}
	</select>
	
	<!-- 지정 휴무일 조회 (달력) -->
	<select id="calendarOffSelect">
		SELECT OFF_DAY_NO, OFF_DAY_TITLE, TO_CHAR(OFF_DAY_START, 'YYYY-MM-DD') OFF_DAY_START, 
			TO_CHAR(OFF_DAY_END, 'YYYY-MM-DD') OFF_DAY_END
		FROM "OFF_DAY"
		WHERE STORE_NO = #{storeNo}
	</select>
	
	<!-- 기존에 존재하는 휴무일 검색 -->
	<select id="calendarOffCheck">
		SELECT COUNT(*) FROM "OFF_DAY" 
		WHERE STORE_NO = #{storeNo} AND (OFF_DAY_START = #{offDayStart} OR OFF_DAY_END = #{offDayStart})
		
	</select>
	
	<!-- 지정 휴무일 등록 -->
	<insert id="calendarOffInsert">
		INSERT INTO "OFF_DAY" VALUES(SEQ_DAY_OFF_NO.NEXTVAL, #{offDayTitle}, 
		#{offDayStart}, #{offDayEnd}, #{storeNo})
	</insert>
	
	<!-- 지정 후무일 변경 -->
	<update id="calendaroffUpdate">
		UPDATE "OFF_DAY" SET OFF_DAY_TITLE = #{offDayTitle}, OFF_DAY_START = #{offDayStart}, OFF_DAY_END = #{offDayEnd}
		WHERE OFF_DAY_NO = (
			SELECT OFF_DAY_NO
			FROM "OFF_DAY"
			WHERE STORE_NO = #{storeNo} AND OFF_DAY_START = #{offDayStart} AND OFF_DAY_END = #{offDayEnd}
		)
	</update>
	
	<!-- 지정 후무일 삭제 -->
	<delete id="calendaroffDelete">
		DELETE FROM "OFF_DAY" 		
		WHERE OFF_DAY_NO = (
			SELECT OFF_DAY_NO
			FROM "OFF_DAY"
			WHERE STORE_NO = #{storeNo} AND OFF_DAY_START = #{offDayStart} AND OFF_DAY_END = #{offDayEnd}
		)
	</delete>
	
	<!-- *** 예약 *** -->
	
	<!-- 전체 예약 조회 -->
	<select id="reservAll">
		SELECT MEMBER_NAME, RESERV_NO, MEMBER_TEL, TO_CHAR(RESERV_DATE, 'YYYY"년" MM"월" DD"일"') RESERV_DATE, 
			RESERV_TIME, RESERV_COUNT, RESERV_REQUEST, RESERV_STATUS_FL, STORE_NO
		FROM "RESERVATION"
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE STORE_NO = (
			SELECT STORE_NO
			FROM "STORE"
			JOIN MEMBER USING(MEMBER_NO)
			WHERE MEMBER_NO = #{memberNo}
		)
		ORDER BY RESERV_DATE
	</select>
	
	<!-- 예약 조회 -->
	<select id="selectReserv">
		SELECT MEMBER_NO, MEMBER_NAME, RESERV_NO, MEMBER_TEL, TO_CHAR(RESERV_DATE, 'YYYY"년" MM"월" DD"일"') RESERV_DATE, 
			RESERV_TIME, RESERV_COUNT, RESERV_REQUEST, RESERV_STATUS_FL, STORE_NO
		FROM "RESERVATION"
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE STORE_NO = #{storeNo} 
				
		<if test='reservStatusFl == ""'>
			AND RESERV_DATE > SYSDATE
		</if>
		
		<if test='reservStatusFl == "Y"'>
			AND RESERV_STATUS_FL = #{reservStatusFl} AND RESERV_DATE > SYSDATE
		</if>
		
		<if test='reservStatusFl == "N"'>
			AND RESERV_STATUS_FL = #{reservStatusFl} AND RESERV_DATE > SYSDATE
		</if>
		
		<if test='reservStatusFl == "C"'>
			AND RESERV_STATUS_FL = #{reservStatusFl} AND RESERV_DATE > SYSDATE
		</if>
		<if test='reservStatusFl == "P"'>
			AND RESERV_DATE   <![CDATA[<]]> SYSDATE
		</if>
		
		ORDER BY RESERV_DATE
	</select>
	
	<!-- 예약 승인 -->
	<update id="updateReservStatus">
		UPDATE "RESERVATION" SET RESERV_STATUS_FL = 'Y'
		WHERE RESERV_NO = #{reservNo}
	</update>
	
	<!-- 예약 거절 -->
	<update id="rejectReservStatus">
		UPDATE "RESERVATION" SET RESERV_STATUS_FL = 'C'
		WHERE RESERV_NO = #{reservNo}
	</update>
		
	<!-- 노쇼 상태로 변경 -->
	<update id="noshowReservStatus">
		UPDATE "RESERVATION" SET RESERV_STATUS_FL = 'X' WHERE RESERV_NO = #{reservNo}
	</update>
	
	<!-- 회원 경고 횟수, 번호  조회 -->
	<select id="selectFlag">
		SELECT MEMBER_FLAG 
		FROM "RESERVATION" r 
		JOIN "MEMBER" USING (MEMBER_NO)
		WHERE RESERV_NO = #{reservNo}
	</select>
	
	<!-- 경고 횟수 증가 -->
	<update id="updateFlag">
		UPDATE "MEMBER" SET MEMBER_FLAG = #{memberFlag} WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 확정된 예약 조회 -->
	<select id="reservConfirm">
		SELECT RESERV_NO, TO_CHAR(RESERV_DATE, 'YYYY-MM-DD') RESERV_DATE, 
			RESERV_TIME, RESERV_COUNT
		FROM "RESERVATION"
		WHERE STORE_NO = #{storeNo} AND RESERV_DATE > SYSDATE
	</select>
	
	
	<!-- *** 사장님 정보 *** -->
	
	<!-- 사장님 정보 변경 화면으로 전환 + 기존 정보 조회 -->
	<select id="selectCeoInfo">
		SELECT MEMBER_EMAIL, MEMBER_TEL FROM "MEMBER" WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<!-- 사장님 정보 변경 -->
	<update id="ceoInfoUpdate">
		UPDATE "MEMBER" SET
		MEMBER_EMAIL = #{memberEmail}, MEMBER_TEL = #{memberTel}
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 암호화 비밀번호 조회 -->
	<select id="selectPw">
		SELECT MEMBER_PW FROM "MEMBER" WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<!-- 비밀번호 변경 -->
	<update id="ceoPwUpdate">
		UPDATE "MEMBER" SET MEMBER_PW = #{encPw} WHERE MEMBER_NO = #{memberNo}
	</update>
	
	
	<!-- 사장님 리뷰 조회 -->
	<select id="reviewAll" resultMap="review_rm">
		SELECT DISTINCT MEMBER_NICKNAME, PROFILE_IMG, REVIEW_NO, REVIEW_RATING, REVIEW_CONTENT,
			TO_CHAR(REVIEW__REG_DATE, 'YYYY-MM-DD') REVIEW__REG_DATE, REVIEW_DEL_FL,
			STORE_NO, MEMBER_NO
		FROM REVIEW
		JOIN "MEMBER" USING (MEMBER_NO)
		WHERE STORE_NO = (
			SELECT STORE_NO
			FROM "STORE"
			JOIN MEMBER USING(MEMBER_NO)
			WHERE MEMBER_NO = #{memberNo})
		AND REVIEW_DEL_FL = 'N'
		ORDER BY REVIEW_NO DESC
	</select>
	
	<!-- 리뷰 이미지 조회 -->
   <select id="uploadImageList" resultType="UploadImage">
		SELECT * 
		FROM UPLOAD_IMAGE
		WHERE REVIEW_NO = #{reviewNo}
		ORDER BY IMAGE_ORDER
	</select> 
	
	<!-- 리뷰 해시태그 조회 -->
	 <select id="selectHashList" resultType="ReviewHash">
		SELECT HASH_NO, REVIEW_NO, HASH_TITLE 
		FROM REVIEW_HASH
		JOIN HASH USING (HASH_NO)
		WHERE REVIEW_NO = #{reviewNo}
	</select>
	
	<!-- 리뷰 사장님 댓글 조회 -->
	 <select id="selectReplyList" resultType="ReviewReply">
		SELECT R.REPLY_NO , R.REPLY_CONENT, R.REPLY_REG_DATE ,R.REPLY_DEL_FL, 
			R.REVIEW_NO,  S.STORE_IMG
		FROM REVIEW_REPLY R
		JOIN STORE S ON (R.STORE_NO = S.STORE_NO)
		WHERE REVIEW_NO = #{reviewNo}
		AND REPLY_DEL_FL = 'N'
	</select>
	
	<!-- 사장님 답변 조회 -->
	<select id="reviewReply" resultMap="review_rm">
		SELECT DISTINCT MEMBER_NICKNAME, PROFILE_IMG, REVIEW_NO, REVIEW_RATING, REVIEW_CONTENT,
	        TO_CHAR(REVIEW__REG_DATE, 'YYYY-MM-DD') REVIEW__REG_DATE, REVIEW_DEL_FL,
	        STORE_NO, MEMBER_NO
	    FROM REVIEW
	    JOIN "MEMBER" USING (MEMBER_NO)
	    WHERE STORE_NO = (
	        SELECT STORE_NO
	        FROM "STORE"
	        JOIN MEMBER USING(MEMBER_NO)
	        WHERE MEMBER_NO = #{memberNo}
	    )
	    AND REVIEW_DEL_FL = 'N'
	    AND REVIEW_NO IN (
	        SELECT REVIEW_NO
	        FROM REVIEW_REPLY
	        WHERE REVIEW_DEL_FL = 'N'
	    )
	    ORDER BY REVIEW_NO DESC
	</select>
	
	
	<!-- 사장님 미답변 조회 -->
	<select id="reviewAllNoReply" resultMap="review_rm">
		SELECT DISTINCT MEMBER_NICKNAME, PROFILE_IMG, REVIEW_NO, REVIEW_RATING, REVIEW_CONTENT,
	        TO_CHAR(REVIEW__REG_DATE, 'YYYY-MM-DD') REVIEW__REG_DATE, REVIEW_DEL_FL,
	        STORE_NO, MEMBER_NO
	    FROM REVIEW
	    JOIN "MEMBER" USING (MEMBER_NO)
	    WHERE STORE_NO = (
	        SELECT STORE_NO
	        FROM "STORE"
	        JOIN MEMBER USING(MEMBER_NO)
	        WHERE MEMBER_NO = #{memberNo}
	    )
	    AND REVIEW_DEL_FL = 'N'
	    AND REVIEW_NO NOT IN (
	        SELECT REVIEW_NO
	        FROM REVIEW_REPLY
	        WHERE REVIEW_DEL_FL = 'N'
	    )
	    ORDER BY REVIEW_NO DESC
	</select>
	
	<!-- 사장님 댓글 삽입 -->
	<insert id="insertReply">
		INSERT INTO "REVIEW_REPLY"
		VALUES (NEXT_REPLY_NO(), #{storeNo}, #{replyConent}, SYSDATE, DEFAULT, #{reviewNo})
	</insert>
	
	<!-- 사장님 댓글 수정 -->
	<update id="updateReply">
		UPDATE "REVIEW_REPLY" SET
		REPLY_CONENT = #{replyConent}
		WHERE REPLY_NO = #{replyNo}
	</update>
	
	<!-- 사장님 댓글 삭제 -->
	<delete id="deleteReply">
		DELETE FROM "REVIEW_REPLY"
		WHERE REPLY_NO = #{replyNo}
	</delete>
	
	
	
	
	
	
	
	
	
</mapper>