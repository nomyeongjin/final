<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.foodpin.websocket.model.mapper.NotificationMapper">

	<!-- 알림 목록 조회 -->
	<select id="selectNotification">
		SELECT NOTIFICATION_NO, NOTIFICATION_CONTENT, NOTIFICATION_CHECK,
		NOTIFICATION_URL, SEND_MEMBER_PROFILE_IMG, 
			<![CDATA[
			CASE
					 WHEN CURRENT_DATE - NOTIFICATION_DATE < 1 / 24 / 60 
					 THEN FLOOR((CURRENT_DATE - NOTIFICATION_DATE) * 24 * 60 * 60)  || '초 전'
					 
					 WHEN CURRENT_DATE - NOTIFICATION_DATE < 1 / 24 
					 THEN FLOOR((CURRENT_DATE - NOTIFICATION_DATE)* 24 * 60) || '분 전'
					 
					 WHEN CURRENT_DATE - NOTIFICATION_DATE < 1
					 THEN FLOOR((CURRENT_DATE - NOTIFICATION_DATE) * 24) || '시간 전'
					 
					 ELSE TO_CHAR(NOTIFICATION_DATE, 'YYYY-MM-DD')
				 	
				 END NOTIFICATION_DATE 
		 	]]>
		FROM "NOTIFICATION"
		WHERE RECEIVE_MEMBER_NO = #{receiveMemberNo}
		ORDER
		BY NOTIFICATION_NO DESC
	</select>
	
	
	<!-- 알림 보낼 때 필요한 데이터 조회 -->
	<select id="selectStoreData">
		SELECT S.MEMBER_NO, TO_CHAR(R.RESERV_DATE, 'YYYY-MM-DD') "RESERV_DATE", S.STORE_NO , S.STORE_NAME, M.MEMBER_NICKNAME
		FROM "MEMBER" M
		JOIN "RESERVATION" R ON M.MEMBER_NO = R.MEMBER_NO
		JOIN "STORE" S ON R.STORE_NO = S.STORE_NO
		WHERE R.RESERV_NO = #{reservNo}
	</select>
	

	<select id="selectStoreName">
		SELECT STORE_NO, STORE_NAME
		FROM "STORE"
		WHERE STORE_NO = #{storeNo}
	</select>	

	<!-- 알림 추가 -->
<!-- 	<insert id="insertNotification">
		INSERT INTO "NOTIFICATION" VALUES(
			SEQ_NOTI_NO.NEXTVAL, #{notificationContent}, DEFAULT, DEFAULT,
			#{notificationUrl}, #{sendMemberProfileImg}, #{sendMemberNo},
			#{receiveMemberNo})
	</insert> -->
	
	<!-- 읽지 않은 알림 조회 -->
	<select id="notReadCheck">
		SELECT COUNT(*) 
		FROM "NOTIFICATION"
		WHERE RECEIVE_MEMBER_NO = #{memberNo}
		AND NOTIFICATION_CHECK = 'N'
	</select>

	<!-- 알림 읽음으로 변경 -->
	<update id="updateNotification">
		UPDATE "NOTIFICATION" SET
		NOTIFICATION_CHECK = 'Y'
		WHERE NOTIFICATION_NO = #{notificationNo}
	</update>
	
	
	<!-- 알림 삭제 -->
	<delete id="deleteNotification">
		DELETE FROM "NOTIFICATION"
		WHERE NOTIFICATION_NO = #{notificationNo}
	</delete>
	
	<!-- 일반 회원에게 보내는 알림 -->
	<insert id="sendNotificationMember">
		INSERT INTO "NOTIFICATION" VALUES(
			SEQ_NOTIFICATION_NO.NEXTVAL, #{notificationContent}, DEFAULT, DEFAULT,
			#{notificationUrl}, #{sendMemberProfileImg}, #{sendMemberNo},
			#{receiveMemberNo}, #{notificationType}, #{notiCode})
	</insert>
	
	
	<!-- 가게 사장님에게 보내는 알림 -->
	<insert id="sendNotificationStore">
		INSERT INTO "NOTIFICATION" VALUES(
			SEQ_NOTIFICATION_NO.NEXTVAL, #{notificationContent}, DEFAULT, DEFAULT,
			#{notificationUrl}, #{sendMemberProfileImg}, #{sendMemberNo},
			#{receiveMemberNo}, #{notificationType}, #{notiCode})
	</insert>
	
	
	<!-- 관리자에게 보내는 알림 -->
	<insert id="sendNotificationManager">
		INSERT INTO "NOTIFICATION" VALUES(
			SEQ_NOTIFICATION_NO.NEXTVAL, #{notificationContent}, DEFAULT, DEFAULT,
			#{notificationUrl}, #{sendMemberProfileImg}, #{sendMemberNo},
			#{receiveMemberNo}, #{notificationType}, #{notiCode})
	</insert>
	
	
	<!-- 예약한 사람의 회원번호  -->
	<select id="selectReservMemerNo">
		SELECT MEMBER_NO
		FROM "RESERVATION"
		WHERE RESERV_NO = #{reservNo}
	</select>
	
	<!-- 가게 사장님이 답글 작성하기 위한 데이터 조회 -->
	<select id="selectReviewData">
		SELECT V.REVIEW_NO , M.MEMBER_NICKNAME, V.STORE_NO , M.MEMBER_NO, V.REVIEW_NO 
		FROM "REVIEW" V
		JOIN "MEMBER" M ON (M.MEMBER_NO = V.MEMBER_NO)
		WHERE V.REVIEW_NO = #{reviewNo}
	</select>
	
	<select id="memberNo">
		SELECT MEMBER_NO 
		FROM "REVIEW"
		WHERE REVIEW_NO = #{reviewNo}
	</select>

	<!-- 가게 신고 데이터 조회 -->
	<select id="selectManagerData">
		SELECT STORE_NAME
		FROM "STORE"
		WHERE STORE_NO = #{storeNo}
	</select>
	
	<!-- 관리자 회원 번호 -->
	<select id="selectManagerNo">
		SELECT MEMBER_NO
		FROM "MEMBER"
		WHERE MEMBER_CODE = 3
	</select>
	
	<!-- 예약 노쇼 알림 보낼 때 사용하는 데이터 조회 -->
	<select id="selectNoshowData">
		SELECT MEMBER_NICKNAME , TO_CHAR(RESERV_DATE, 'YYYY-MM-DD') "RESERV_DATE", MEMBER_NO
		FROM "RESERVATION"
		JOIN "MEMBER" USING (MEMBER_NO)
		WHERE RESERV_NO = #{reservNo}
	</select>
	
	<!-- 회원이 방문 리뷰 작성할 때 필요안 데이터 조회 -->
	<select id="selectReservationData">
		SELECT M.MEMBER_NICKNAME , TO_CHAR(R.RESERV_DATE, 'YYYY-MM-DD') "RESERV_DATE", R.RESERV_NO, R.STORE_NO 
		FROM "RESERVATION" R 
		JOIN "MEMBER" M  ON (R.MEMBER_NO = M.MEMBER_NO)
		WHERE RESERV_NO = #{reservNo}
	</select>
	
	<!-- 가게 회원 번호 -->
	<select id="selectStoreMemberNo">
		SELECT MEMBER_NO  
		FROM  "STORE"
		WHERE STORE_NO = #{storeNo}
	</select>
	
	<!-- 리뷰 신고를 위한 데이터 조회 -->
	<select id="selectReivewReportData">
		SELECT STORE_NAME, REVIEW_NO 
		FROM "REVIEW"
		JOIN "STORE" USING (STORE_NO)
		WHERE REVIEW_NO = #{reviewNo}
	</select>

	<!-- 리뷰 신고 후 삭제 처리 시 필요한 데이터 조회 -->
	<select id="selectReportData">
		SELECT R.REPORT_NO, TO_CHAR(R.REPORT_DATE, 'YYYY-MM-DD') "REPORT_DATE", S.STORE_NAME, V.MEMBER_NO , S.STORE_NO 
		FROM "REVIEW" V
		JOIN "REPORT" R ON (V.REVIEW_NO = R.REVIEW_NO)
		JOIN "STORE" S ON (S.STORE_NO = V.STORE_NO)
		WHERE REPORT_NO = #{reportNo}
	</select>
	
	<!-- 가게 신고 (해결 완료) -->
	<select id="storeReportComplete">
		SELECT S.STORE_NO, R.MEMBER_NO , S.STORE_NAME, R.REQUEST_NO
		FROM "REQUEST_EDIT" R
		JOIN "STORE" S ON (R.STORE_NO = S.STORE_NO)
		WHERE REQUEST_NO = #{requestNo}
	</select>
	
	<!-- 가게 정보 요청 처리에 필요한 회원 번호 -->
<!-- 	<select id="selectMemberNo">
		
	</select> -->
	
</mapper>